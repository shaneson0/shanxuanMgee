%%%----------------------------------------------------------------------
%%% @copyright 2010 mgee (Ming Game Engine Erlang)
%%%
%%% @author odinxu
%%% @doc Generated by the rebuild_mgee_vo_erl.php  DO NOT EDIT!
%%% 	test_..... function use for stree test application,
%%%     get_...... function use for mgee application.
%%% @end
%%%----------------------------------------------------------------------

-module(mgee_vo).
	
-include("mgee_vo.hrl").

%%-complie(export_all).	

-export([
	get_m_result_fail_binary/1,
	test_m_result_fail_record/1,
	get_m_login_flash_login_recv_record/1,
	test_m_login_flash_login_recv_binary/1,
	get_m_login_flash_login_send_binary/1,
	test_m_login_flash_login_send_record/1,
	get_m_role_list_recv_record/1,
	test_m_role_list_recv_binary/1,
	get_m_role_list_send_binary/1,
	test_m_role_list_send_record/1,
	get_m_role_add_recv_record/1,
	test_m_role_add_recv_binary/1,
	get_m_role_add_send_binary/1,
	test_m_role_add_send_record/1,
	get_m_role_del_recv_record/1,
	test_m_role_del_recv_binary/1,
	get_m_role_del_send_binary/1,
	test_m_role_del_send_record/1,
	get_m_role_enter_recv_record/1,
	test_m_role_enter_recv_binary/1,
	get_m_role_enter_send_binary/1,
	test_m_role_enter_send_record/1,
	get_m_vw_enter_recv_record/1,
	test_m_vw_enter_recv_binary/1,
	get_m_vw_enter_send_binary/1,
	test_m_vw_enter_send_record/1,
	get_m_vw_enter_send2_binary/1,
	test_m_vw_enter_send2_record/1,
	get_m_move_pos_sync_send_binary/1,
	test_m_move_pos_sync_send_record/1,
	get_m_move_walk_path_recv_record/1,
	test_m_move_walk_path_recv_binary/1,
	get_m_move_walk_path_send_binary/1,
	test_m_move_walk_path_send_record/1,
	get_m_move_walk_path_send2_binary/1,
	test_m_move_walk_path_send2_record/1,
	get_m_move_walk_recv_record/1,
	test_m_move_walk_recv_binary/1,
	get_m_move_walk_send_binary/1,
	test_m_move_walk_send_record/1,
	get_m_move_run_recv_record/1,
	test_m_move_run_recv_binary/1,
	get_m_move_run_send_binary/1,
	test_m_move_run_send_record/1,
	get_m_chat_world_recv_record/1,
	test_m_chat_world_recv_binary/1,
	get_m_chat_world_send_binary/1,
	test_m_chat_world_send_record/1,
	get_m_chat_world_send2_binary/1,
	test_m_chat_world_send2_record/1,
	get_m_chat_private_recv_record/1,
	test_m_chat_private_recv_binary/1,
	get_m_chat_private_send_binary/1,
	test_m_chat_private_send_record/1,
	get_m_chat_private_send2_binary/1,
	test_m_chat_private_send2_record/1,
	get_m_chat_view_recv_record/1,
	test_m_chat_view_recv_binary/1,
	get_m_chat_view_send_binary/1,
	test_m_chat_view_send_record/1,
	get_m_chat_view_send2_binary/1,
	test_m_chat_view_send2_record/1,
	get_m_chat_team_recv_record/1,
	test_m_chat_team_recv_binary/1,
	get_m_chat_team_send_binary/1,
	test_m_chat_team_send_record/1,
	get_m_chat_team_send2_binary/1,
	test_m_chat_team_send2_record/1,
	get_m_chat_family_recv_record/1,
	test_m_chat_family_recv_binary/1,
	get_m_chat_family_send_binary/1,
	test_m_chat_family_send_record/1,
	get_m_chat_family_send2_binary/1,
	test_m_chat_family_send2_record/1,
	get_m_chat_faction_recv_record/1,
	test_m_chat_faction_recv_binary/1,
	get_m_chat_faction_send_binary/1,
	test_m_chat_faction_send_record/1,
	get_m_chat_faction_send2_binary/1,
	test_m_chat_faction_send2_record/1
		]).



test_m_result_fail_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_result_fail{
				reason = Reason,
				result = Result}.

get_m_result_fail_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_result_fail.reason},
		{result, RecordData#m_result_fail.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: login  Method: flash_login	====================
get_m_login_flash_login_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{account_name, Account_name}, 
		   {account_pwd, Account_pwd}] } = Amf3Obj,
	#m_login_flash_login_recv{
				account_name = Account_name,
				account_pwd = Account_pwd}.

test_m_login_flash_login_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{account_name, RecordData#m_login_flash_login_recv.account_name},
		{account_pwd, RecordData#m_login_flash_login_recv.account_pwd}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_login_flash_login_send_record(Amf3Obj) ->
	{obj, [{result, Result}, 
		   {rolelist, Rolelist}] } = Amf3Obj,
	#m_login_flash_login_send{
				result = Result,
				rolelist = Rolelist}.

get_m_login_flash_login_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{result, RecordData#m_login_flash_login_send.result},
		{rolelist, RecordData#m_login_flash_login_send.rolelist}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: role  Method: list	====================
get_m_role_list_recv_record(_BinaryData) -> ok. 

test_m_role_list_recv_binary(_BinaryData) -> ok. 

test_m_role_list_send_record(Amf3Obj) ->
	{obj, [{result, Result}, 
		   {rolelist, Rolelist}] } = Amf3Obj,
	#m_role_list_send{
				result = Result,
				rolelist = Rolelist}.

get_m_role_list_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{result, RecordData#m_role_list_send.result},
		{rolelist, RecordData#m_role_list_send.rolelist}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: role  Method: add	====================
get_m_role_add_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{rolename, Rolename}, 
		   {sex, Sex}, 
		   {skinid, Skinid}] } = Amf3Obj,
	#m_role_add_recv{
				rolename = Rolename,
				sex = Sex,
				skinid = Skinid}.

test_m_role_add_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{rolename, RecordData#m_role_add_recv.rolename},
		{sex, RecordData#m_role_add_recv.sex},
		{skinid, RecordData#m_role_add_recv.skinid}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_role_add_send_record(Amf3Obj) ->
	{obj, [{result, Result}, 
		   {rolelist, Rolelist}] } = Amf3Obj,
	#m_role_add_send{
				result = Result,
				rolelist = Rolelist}.

get_m_role_add_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{result, RecordData#m_role_add_send.result},
		{rolelist, RecordData#m_role_add_send.rolelist}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: role  Method: del	====================
get_m_role_del_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{roleid, Roleid}] } = Amf3Obj,
	#m_role_del_recv{
				roleid = Roleid}.

test_m_role_del_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{roleid, RecordData#m_role_del_recv.roleid}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_role_del_send_record(Amf3Obj) ->
	{obj, [{result, Result}, 
		   {rolelist, Rolelist}] } = Amf3Obj,
	#m_role_del_send{
				result = Result,
				rolelist = Rolelist}.

get_m_role_del_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{result, RecordData#m_role_del_send.result},
		{rolelist, RecordData#m_role_del_send.rolelist}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: role  Method: enter	====================
get_m_role_enter_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{roleid, Roleid}] } = Amf3Obj,
	#m_role_enter_recv{
				roleid = Roleid}.

test_m_role_enter_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{roleid, RecordData#m_role_enter_recv.roleid}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_role_enter_send_record(Amf3Obj) ->
	{obj, [{result, Result}, 
		   {role_attr, Role_attr}] } = Amf3Obj,
	#m_role_enter_send{
				result = Result,
				role_attr = Role_attr}.

get_m_role_enter_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{result, RecordData#m_role_enter_send.result},
		{role_attr, RecordData#m_role_enter_send.role_attr}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: vw  Method: enter	====================
get_m_vw_enter_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{vwid, Vwid}] } = Amf3Obj,
	#m_vw_enter_recv{
				vwid = Vwid}.

test_m_vw_enter_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{vwid, RecordData#m_vw_enter_recv.vwid}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_vw_enter_send_record(Amf3Obj) ->
	{obj, [{result, Result}, 
		   {rolelist, Rolelist}] } = Amf3Obj,
	#m_vw_enter_send{
				result = Result,
				rolelist = Rolelist}.

get_m_vw_enter_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{result, RecordData#m_vw_enter_send.result},
		{rolelist, RecordData#m_vw_enter_send.rolelist}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_vw_enter_send2_record(Amf3Obj) ->
	{obj, [{role_attr, Role_attr}, 
		   {roleid, Roleid}] } = Amf3Obj,
	#m_vw_enter_send2{
				role_attr = Role_attr,
				roleid = Roleid}.

get_m_vw_enter_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{role_attr, RecordData#m_vw_enter_send2.role_attr},
		{roleid, RecordData#m_vw_enter_send2.roleid}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_move_pos_sync_send_record(Amf3Obj) ->
	{obj, [{sync_list, Sync_list}] } = Amf3Obj,
	#m_move_pos_sync_send{
				sync_list = Sync_list}.

get_m_move_pos_sync_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{sync_list, RecordData#m_move_pos_sync_send.sync_list}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: move  Method: walk_path	====================
get_m_move_walk_path_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{p, P}] } = Amf3Obj,
	#m_move_walk_path_recv{
				p = P}.

test_m_move_walk_path_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{p, RecordData#m_move_walk_path_recv.p}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_move_walk_path_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_move_walk_path_send{
				reason = Reason,
				result = Result}.

get_m_move_walk_path_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_move_walk_path_send.reason},
		{result, RecordData#m_move_walk_path_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_move_walk_path_send2_record(Amf3Obj) ->
	{obj, [{p, P}, 
		   {roleid, Roleid}] } = Amf3Obj,
	#m_move_walk_path_send2{
				p = P,
				roleid = Roleid}.

get_m_move_walk_path_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{p, RecordData#m_move_walk_path_send2.p},
		{roleid, RecordData#m_move_walk_path_send2.roleid}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: move  Method: walk	====================
get_m_move_walk_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{dir, Dir}, 
		   {px, Px}, 
		   {py, Py}, 
		   {tx, Tx}, 
		   {ty, Ty}] } = Amf3Obj,
	#m_move_walk_recv{
				dir = Dir,
				px = Px,
				py = Py,
				tx = Tx,
				ty = Ty}.

test_m_move_walk_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{dir, RecordData#m_move_walk_recv.dir},
		{px, RecordData#m_move_walk_recv.px},
		{py, RecordData#m_move_walk_recv.py},
		{tx, RecordData#m_move_walk_recv.tx},
		{ty, RecordData#m_move_walk_recv.ty}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_move_walk_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_move_walk_send{
				reason = Reason,
				result = Result}.

get_m_move_walk_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_move_walk_send.reason},
		{result, RecordData#m_move_walk_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: move  Method: run	====================
get_m_move_run_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{dir, Dir}, 
		   {px, Px}, 
		   {py, Py}, 
		   {tx, Tx}, 
		   {ty, Ty}] } = Amf3Obj,
	#m_move_run_recv{
				dir = Dir,
				px = Px,
				py = Py,
				tx = Tx,
				ty = Ty}.

test_m_move_run_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{dir, RecordData#m_move_run_recv.dir},
		{px, RecordData#m_move_run_recv.px},
		{py, RecordData#m_move_run_recv.py},
		{tx, RecordData#m_move_run_recv.tx},
		{ty, RecordData#m_move_run_recv.ty}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_move_run_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_move_run_send{
				reason = Reason,
				result = Result}.

get_m_move_run_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_move_run_send.reason},
		{result, RecordData#m_move_run_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: chat  Method: world	====================
get_m_chat_world_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{body, Body}] } = Amf3Obj,
	#m_chat_world_recv{
				body = Body}.

test_m_chat_world_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_world_recv.body}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_world_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_chat_world_send{
				reason = Reason,
				result = Result}.

get_m_chat_world_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_chat_world_send.reason},
		{result, RecordData#m_chat_world_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_world_send2_record(Amf3Obj) ->
	{obj, [{body, Body}, 
		   {roleid, Roleid}, 
		   {rolename, Rolename}] } = Amf3Obj,
	#m_chat_world_send2{
				body = Body,
				roleid = Roleid,
				rolename = Rolename}.

get_m_chat_world_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_world_send2.body},
		{roleid, RecordData#m_chat_world_send2.roleid},
		{rolename, RecordData#m_chat_world_send2.rolename}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: chat  Method: private	====================
get_m_chat_private_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{body, Body}, 
		   {to_roleid, To_roleid}, 
		   {to_rolename, To_rolename}] } = Amf3Obj,
	#m_chat_private_recv{
				body = Body,
				to_roleid = To_roleid,
				to_rolename = To_rolename}.

test_m_chat_private_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_private_recv.body},
		{to_roleid, RecordData#m_chat_private_recv.to_roleid},
		{to_rolename, RecordData#m_chat_private_recv.to_rolename}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_private_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_chat_private_send{
				reason = Reason,
				result = Result}.

get_m_chat_private_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_chat_private_send.reason},
		{result, RecordData#m_chat_private_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_private_send2_record(Amf3Obj) ->
	{obj, [{body, Body}, 
		   {roleid, Roleid}, 
		   {rolename, Rolename}] } = Amf3Obj,
	#m_chat_private_send2{
				body = Body,
				roleid = Roleid,
				rolename = Rolename}.

get_m_chat_private_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_private_send2.body},
		{roleid, RecordData#m_chat_private_send2.roleid},
		{rolename, RecordData#m_chat_private_send2.rolename}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: chat  Method: view	====================
get_m_chat_view_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{body, Body}] } = Amf3Obj,
	#m_chat_view_recv{
				body = Body}.

test_m_chat_view_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_view_recv.body}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_view_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_chat_view_send{
				reason = Reason,
				result = Result}.

get_m_chat_view_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_chat_view_send.reason},
		{result, RecordData#m_chat_view_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_view_send2_record(Amf3Obj) ->
	{obj, [{body, Body}, 
		   {roleid, Roleid}, 
		   {rolename, Rolename}] } = Amf3Obj,
	#m_chat_view_send2{
				body = Body,
				roleid = Roleid,
				rolename = Rolename}.

get_m_chat_view_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_view_send2.body},
		{roleid, RecordData#m_chat_view_send2.roleid},
		{rolename, RecordData#m_chat_view_send2.rolename}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: chat  Method: team	====================
get_m_chat_team_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{body, Body}] } = Amf3Obj,
	#m_chat_team_recv{
				body = Body}.

test_m_chat_team_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_team_recv.body}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_team_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_chat_team_send{
				reason = Reason,
				result = Result}.

get_m_chat_team_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_chat_team_send.reason},
		{result, RecordData#m_chat_team_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_team_send2_record(Amf3Obj) ->
	{obj, [{body, Body}, 
		   {roleid, Roleid}, 
		   {rolename, Rolename}] } = Amf3Obj,
	#m_chat_team_send2{
				body = Body,
				roleid = Roleid,
				rolename = Rolename}.

get_m_chat_team_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_team_send2.body},
		{roleid, RecordData#m_chat_team_send2.roleid},
		{rolename, RecordData#m_chat_team_send2.rolename}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: chat  Method: family	====================
get_m_chat_family_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{body, Body}] } = Amf3Obj,
	#m_chat_family_recv{
				body = Body}.

test_m_chat_family_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_family_recv.body}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_family_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_chat_family_send{
				reason = Reason,
				result = Result}.

get_m_chat_family_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_chat_family_send.reason},
		{result, RecordData#m_chat_family_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_family_send2_record(Amf3Obj) ->
	{obj, [{body, Body}, 
		   {roleid, Roleid}, 
		   {rolename, Rolename}] } = Amf3Obj,
	#m_chat_family_send2{
				body = Body,
				roleid = Roleid,
				rolename = Rolename}.

get_m_chat_family_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_family_send2.body},
		{roleid, RecordData#m_chat_family_send2.roleid},
		{rolename, RecordData#m_chat_family_send2.rolename}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

%% ==================== Module: chat  Method: faction	====================
get_m_chat_faction_recv_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [{body, Body}] } = Amf3Obj,
	#m_chat_faction_recv{
				body = Body}.

test_m_chat_faction_recv_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_faction_recv.body}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_faction_send_record(Amf3Obj) ->
	{obj, [{reason, Reason}, 
		   {result, Result}] } = Amf3Obj,
	#m_chat_faction_send{
				reason = Reason,
				result = Result}.

get_m_chat_faction_send_binary(RecordData) ->
	Amf3Obj = {obj, [
		{reason, RecordData#m_chat_faction_send.reason},
		{result, RecordData#m_chat_faction_send.result}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).

test_m_chat_faction_send2_record(Amf3Obj) ->
	{obj, [{body, Body}, 
		   {roleid, Roleid}, 
		   {rolename, Rolename}] } = Amf3Obj,
	#m_chat_faction_send2{
				body = Body,
				roleid = Roleid,
				rolename = Rolename}.

get_m_chat_faction_send2_binary(RecordData) ->
	Amf3Obj = {obj, [
		{body, RecordData#m_chat_faction_send2.body},
		{roleid, RecordData#m_chat_faction_send2.roleid},
		{rolename, RecordData#m_chat_faction_send2.rolename}
		] },
	zlib:compress(amf3:encode(Amf3Obj)).
