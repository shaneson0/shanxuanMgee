----------------------------------------------------------------------

GME 通讯协议 - 登录与创建角色  (2010.01.13)

2010.01.13	编写本文档

2010.01.18	细化 vw 模块、move 模块、chat 模块

----------------------------------------------------------------------

----------------------------------------------------------------------
规范化
----------------------------------------------------------------------
1. 本文档使用 tab 缩进，每个tab等于4个空格宽度。
2. 所有模块名必须是 全部小写字母，不允许使用大写字母、数字之类。
3. 所有函数名，必须是  小写字母、数字、下划线的组合，不允许使用大写。
4. 


----------------------------------------------------------------------
定义
----------------------------------------------------------------------
定义：role_attr		 角色属性
---------------------------------
role_attr  目前包括 ( roleid, rolename, sex, skinid , vwid, x, y )
	sex  为 1 和 0 , 0表示男，1表示女
	skinid 为 1 到6 ，表示6种人物形象，从明朝里面拿6个走动的小人过来
	vwid 为虚拟世界场景ID，编号最小值由 10001 开始。
	roleid 为角色ID，编号从1开始



----------------------------------------------------------------------
模块：login 
----------------------------------------------------------------------
函数：flash_login		使用flash登录的方式，后续会有其它登录方式的		
---------------------------------
		
上行：	{ "account_name":"xxxxx", "account_pwd":"xxxxxxx" }
		帐号名，帐号密码
	
下行：	如果登录成功	{ result:ok, rolelist:Array() }
		如果登录失败	{ result:fail, reason:"中文出错原因" }

	登录成功后，客户端应该进入选择角色、创建角色的界面。
	暂时限制每个帐号只能创建3个角色。
	rolelist:Array()  返回该帐号上，已经创建了的角色信息。
	角色信息包括  { roleid, rolename, sex, skinid , vwid, x, y }
	
	注意，一个帐号登录成功后，要将同一帐号的之前的登录，踢下线。

---------------------------------
函数：php_login   .....
---------------------------------
上行：  
	
下行：	

---------------------------------

----------------------------------------------------------------------
模块：role
----------------------------------------------------------------------
函数：list			显示角色列表
---------------------------------
上行：  无数据
	
下行：	{ result:ok, rolelist:Array() }
		如果出错	{ result:fail, reason:"中文出错原因" }

		注意，如果该帐号上，一个角色都没有建立，一样返回数组，
		只不过数组是空数组。

---------------------------------
函数：add			创建新角色
---------------------------------
上行：	{ "rolename":"xxxx", "sex":x, "skinid":xx }
	
下行：	返回结果同 list 函数返回结果

		创建新角色时， vwid, x, y 这些数据，不需要由客户端提交。
		而是由服务器端决定。

---------------------------------
函数：del			删除角色
---------------------------------
上行：  { "roleid":xxxxx }
	
下行：	返回结果同 list 函数返回结果



---------------------------------
函数：enter			使用哪一个角色，进入游戏
---------------------------------
上行：  { "roleid":xxxxx }
	
下行：	如果登录成功	{ result:ok, role_attr }
		如果登录失败	{ result:fail, reason:"中文出错原因" }
		
	角色进入游戏成功，则返回所有该角色的基础属性数据。
	这里暂时先不发送背包、任务记录之类数据给Client。
---------------------------------


----------------------------------------------------------------------
模块：vm    意思是 Virtual World
----------------------------------------------------------------------
函数：enter
---------------------------------
上行：	{ vmid }
		告诉Server，我进入了哪一个场景地图，进入后应该站在哪个位置
	
下行：	{ result:ok, rolelist:Array() }
		如果出错	{ result:fail, reason:"中文出错原因" }
			Reason 为进入失败的原因，比如说，场景人满，等级不够之类

下行(给其它Client)：   { roleid, role_attr }
	告诉所有在同一场景内的 其它的Client，告诉他们，有人进来了，站在哪

Server注意，socket进程，要保存最近一次的行走路径，这样其他人进入时，能
	发路径给他。要保存当前所在的vmid，这样切换场景时，能先退出旧的vmid
	
---------------------------------
函数: exit
---------------------------------
上行：无
下行：无
下行(给其他Client):    {roleid}


----------------------------------------------------------------------
模块：move		负责走，跑，等操作
----------------------------------------------------------------------
函数：walk_path		走路（一条路径，包括经过的每一个格子坐标）
---------------------------------
上行：  一个数组，{ bpx, bpy, "p": xxxxx, epx, epy }
		p 是一个数组，数组的每一项都是一个对象 { tx, ty }
		表示人物方向，和经过的每一个像素坐标以及格子坐标
	
下行：	{ result:fail, reason:"中文出错原因" }
		成功则不需要下行任何数据

下行(给其它Client)：   
		{ roleid, bpx, bpy, "p": xxxxx, epx, epy }

---------------------------------
函数：walk			走路（每到达下一个格子时发送给服务器一次新格子坐标）
---------------------------------
上行：  { dir, px, py, tx, ty }
	
下行：	{ result:fail, reason:"中文出错原因" }
		成功则不需要下行任何数据

这种不下行给其它Client

---------------------------------
函数：pos_sync
---------------------------------
上行：  没有上行，这个是由服务器端定时发同步广播包的
	
下行：	{ sync_list }
		sync_list 是一个数组，数组的每一项都是一个对象 { roleid, dir, px, py, tx, ty }
		定时将当前可视区域内的所有人的最新坐标，整成一个大广播包，来进行发送。

---------------------------------
函数：
---------------------------------
上行：  
	
下行：	


----------------------------------------------------------------------
模块：chat    	负责聊天
----------------------------------------------------------------------
函数：world		世界频道聊天
---------------------------------
上行：	{ body }
		聊天信息的文本内容
	
下行：	如果发言成功	{ result:ok, reason:"" }
		如果发言失败	{ result:fail, reason:"中文出错原因" }

下行(给其它Client)：   
		{ roleid, rolename, body }

---------------------------------
函数：private	私人聊天
---------------------------------
上行：	{to_roleid, to_rolename, body }
	
下行：	如果发言成功	{ result:ok, reason:"" }
		如果发言失败	{ result:fail, reason:"中文出错原因" }

下行(给其它Client)：   
		{roleid, rolename, body }

---------------------------------
函数：view		地图当前可视区域内的聊天(9宫区域)，顶在头上的字
---------------------------------
上行：	{ body }
		聊天信息的文本内容
	
下行：	如果发言成功	{ result:ok, reason:"" }
		如果发言失败	{ result:fail, reason:"中文出错原因" }

下行(给其它Client)：   
		{ roleid, rolename, body }

---------------------------------
函数：team		宗族聊天频道
---------------------------------
上行：	与 view 相同 
	
下行：	与 view 相同 

下行(给其它Client)：   与 view 相同 

---------------------------------
函数：family	宗族聊天频道
---------------------------------
上行：	与 view 相同 
	
下行：	与 view 相同 

下行(给其它Client)：   与 view 相同 

---------------------------------
函数：faction	国家聊天频道，这里继续使用明朝1的faction来表示国家
---------------------------------
上行：	与 view 相同 
	
下行：	与 view 相同 

下行(给其它Client)：   与 view 相同 


----------------------------------------------------------------------
模块：
----------------------------------------------------------------------
函数：
---------------------------------
		
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：  
	
下行：	


----------------------------------------------------------------------

