----------------------------------------------------------------------

GME 通讯协议  (2010.01.06)

2010.01.08	添加team模块和friend模块

----------------------------------------------------------------------

----------------------------------------------------------------------
规范化
----------------------------------------------------------------------
1. 本文档使用 tab 缩进，每个tab等于4个空格宽度。
2. 所有模块名必须是 全部小写字母，不允许使用大写字母、数字之类。
3. 所有函数名，必须是  小写字母、数字、下划线的组合，不允许使用大写。
4. 


----------------------------------------------------------------------
定义
----------------------------------------------------------------------
定义：user_attr
---------------------------------
user_attr  目前包括 ( username, sex, skin )
		sex  为 1 和 0 , 0表示男，1表示女
		skin 为1 到6 ，表示6种人物形象，从明朝里面拿6个走动的小人过来



----------------------------------------------------------------------
模块：login 
----------------------------------------------------------------------
函数：init
---------------------------------
		
上行：   userid, user_attr
	客户端连接上服务器端后，第一步操作，应该调用 login:init，告诉服务器
	端，他的 用户ID，用户名，性别，现在站在哪个坐标
	
下行：	ok

	如果Server未接收到 init数据，或接受到的数据格式不正确，则Server必须
	立即断开socket连接。
	
	Client上行后，只需简单判断是否断开连接，就知道是否成功 init 了。
	
	init成功后，socket进程必须记住自己的userid, 用户名之类的这些属于。
	后面的操作，这些数据都从socket进程直接取了。	

----------------------------------------------------------------------
模块：vm    意思是 Virtual World
----------------------------------------------------------------------
函数：enter
---------------------------------
上行：	vmid, x, y
		告诉Server，我进入了哪一个场景地图，进入后应该站在哪个位置
	
下行：	失败则发送 vmid, fail, Reason
			Reason 为进入失败的原因，比如说，场景人满，等级不够之类

		成功则发送	vmid, ok, 跟着是一个数组
		数组格式为  ((userid, user_attr, x1, y1, x2, y2, x3, y3.....),
					 (userid, user_attr, x1, y1, x2, y2, x3, y3.....),
					 ( userid, user_attr, x1, y1 ),
					 ......
					)
			即告诉Client，目前该场景内有哪些人，正在按什么路径行走。 
			只有一个坐标的，表示站在那个坐标点上没有动。
		 

下行(给其它Client)：   userid, user_attr, x, y
	告诉所有在同一场景内的 其它的Client，告诉他们，有人进来了，站在哪


Server注意，socket进程，要保存最近一次的行走路径，这样其他人进入时，能
	发路径给他。要保存当前所在的vmid，这样切换场景时，能先退出旧的vmid
	
----------------------------------------------------------------------
模块：move		负责走，跑，等操作
----------------------------------------------------------------------
函数：walk		走路
---------------------------------
上行：   一个数组，((x1,y1),(x2,y2),(x3,y3),....)
		也允许这个数组只有一个坐标	((x1,y1)) 表示走直线没有转弯。
	
下行：	无

下行(给其它Client)：   walk, userid, ((x1,y1),(x2,y2),(x3,y3),....)
		告诉所有在同一场景内的 其它的Client，某个人按某个路径在走。
		
		
---------------------------------
函数：run		跑
---------------------------------
上行：   一个数组，((x1,y1),(x2,y2),(x3,y3),....)
		也允许这个数组只有一个坐标	((x1,y1)) 表示跑直线没有转弯。
	
下行：	无

下行(给其它Client)：   run, userid, ((x1,y1),(x2,y2),(x3,y3),....)
		告诉所有在同一场景内的 其它的Client，某个人按某个路径在跑。

---------------------------------
函数：sit		坐下
---------------------------------
上行：   (x1,y1)
		坐在哪一个坐标
	
下行：	无

下行(给其它Client)：   sit, userid, x1, y1
		告诉所有在同一场景内的 其它的Client，某个人在某个点，坐下了。


----------------------------------------------------------------------
模块：chat    	负责聊天
----------------------------------------------------------------------
函数：
---------------------------------
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：
	
下行：



----------------------------------------------------------------------
模块：team		负责组队
----------------------------------------------------------------------
函数：create	创建一个队伍
---------------------------------
上行：
	
下行：

---------------------------------
函数：invite	邀请某人加入队伍
---------------------------------
上行：
	
下行：

---------------------------------
函数：join		某人同意邀请，并加入队伍
---------------------------------
上行：
	
下行：

---------------------------------
函数：leave		某人离开队伍
---------------------------------
上行：
	
下行：

---------------------------------
函数：offline	某人离线/下线了
---------------------------------
上行：
	
下行：

	如果是队长离线了，队伍中的第2人自动成为队长。
	
---------------------------------
函数：follow	队员跟从队长(跟着队长后面走)
---------------------------------
上行：
	
下行：

---------------------------------
函数：change_leader		队长设置别人成为队长
---------------------------------
上行：
	
下行：

	队长设置别人成为队长，同时把自己在队伍中的顺序，降到最后一位。
	不能是第2位，原因，很大可能该队长，是准备要退出游戏了。


----------------------------------------------------------------------
模块：friend		负责好友系统
----------------------------------------------------------------------
函数：invite	请求加某人为好友
---------------------------------
上行：
    FromUserid , DestUserid
    表示FromUser邀请DestUser
	
下行：
    FromUserid , DestUserid , Reason
    表示FromUser邀请DestUser失败了，返回失败的原因


---------------------------------
函数：join		某人同意请求，并加入双方好友列表
---------------------------------
上行：
    FromUserid , DestUserid
	表示FromUserid同意DestUserid的请求

下行：
    FromUserid , DestUserid , Reason
    表示FromUser添加DestUser失败，失败的原因是Reason


	TODO：未确定！！这里是要做成双方都必然为好友，(A是B的好友，则B肯定A的好友）
			或者是做成 像QQ那样允许单方面加好友。(即A是B的好友，但B不是A的好友）
			需要综合考虑，好友亲密度系统的处理。

---------------------------------
函数：leave		某人离开队伍
---------------------------------
上行：
	
下行：

---------------------------------
函数：remark	设置好友备注
---------------------------------
上行：
	
下行：

---------------------------------
函数：taxis		设置好友显示顺序
---------------------------------
上行：
	
下行：

---------------------------------
函数：group		设置好友分组
---------------------------------
上行：
	
下行：
	（应该要有一个不可删除的默认组）
	
	
---------------------------------
函数：list		获得好友列表
---------------------------------
上行：
    Userid
    表示需要获取该User的所有好友列表

下行：
    Reason
    获取Userid列表失败，Reason返回原因

	
---------------------------------
函数：group_add		增加好友分组
---------------------------------
上行：
	
下行：

---------------------------------
函数：group_del		删除好友分组
---------------------------------
上行：
	
下行：

---------------------------------
函数：group_set_name	好友分组重命名
---------------------------------
上行：
	
下行：

---------------------------------
函数：group_set_taxis	好友分组设置显示顺序
---------------------------------
上行：
	
下行：

---------------------------------
函数：group_list	好友分组列表
---------------------------------
上行：
	
下行：

---------------------------------
函数：bad_add		添加某人到黑名单
---------------------------------
上行：
    FromUserid , DestUserid
    添加DestUser到FromUser的黑名单

下行：
    添加黑名单失败，有可能是因为目标用户已经是该用户的黑名单

---------------------------------
函数：bad_del		从黑名单中删除某人
---------------------------------
上行：
	FromUserid , DestUserid
	从FromUserid中删除DestUserid的黑名单

下行：
    Reason
    表示失败的原因


---------------------------------
函数：bad_list		黑名单列表
---------------------------------
上行：
	Userid 黑名单列表

下行：
    ｛ok,list｝成功，返回黑名单列表
     {false,Reason} 失败，返回原因


---------------------------------
函数：bad_remark	给黑名单中的某人添加、修改备注
---------------------------------
上行：
	
下行：


---------------------------------
函数：intimate_get	好友亲密度
---------------------------------
上行：
	
下行：

---------------------------------
函数：intimate_incr		增加好友亲密度
---------------------------------
上行：
	
下行：

---------------------------------
函数：intimate_desc		减少好友亲密度
---------------------------------
上行：
	
下行：




----------------------------------------------------------------------
模块：fight		负责战斗，应该要有一些动作
----------------------------------------------------------------------
函数：
---------------------------------
上行：
	
下行：

	
	战斗的动作有： 
		普通攻击，对应不同职业，可能有 打，砍，刺等
		技能攻击，
		法术攻击？
		大绝招
		

----------------------------------------------------------------------
模块：task		任务系统
----------------------------------------------------------------------
函数：
---------------------------------
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：
	
下行：


---------------------------------
函数：
---------------------------------
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：
	
下行：

----------------------------------------------------------------------
模块：
----------------------------------------------------------------------
函数：
---------------------------------
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：
	
下行：


----------------------------------------------------------------------
模块：
----------------------------------------------------------------------
函数：
---------------------------------
上行：
	
下行：

---------------------------------
函数：
---------------------------------
上行：
	
下行：

