<?php 

$filename = dirname(dirname(__FILE__)) . '/include/mgee_vo.hrl';
$output_filename = dirname(dirname(__FILE__)) . '/src/mgee_vo.erl';

$lines = file($filename);


$text_export = '';
$text = '';
foreach ($lines as $line_num => $line) {
    //echo "Line #<b>{$line_num}</b> : " . htmlspecialchars($line) . "<br />\n";
    
	$L = trim($line);
    if (substr($L, 0, 8) === '-record(' )
    {
    	$text .= make($L);
    	$text_export .= make_export($L);
    }
}

$done = make_header() 
		. "-export([\n"
		. trim($text_export, ",\n") . "\n"
		. "		]).\n\n\n"
		. $text;

echo $done;
file_put_contents($output_filename, $done);

exit;


function make_export($line)
{
	$pos_1 = strpos($line, ",");
	
	$RecordName = trim(substr($line, 8, $pos_1 - 8 ));
	
	//return "	get_{$RecordName}_record/1,\n	get_{$RecordName}_binary/1,\n";	
	
	if (substr($RecordName, -5) === '_recv')
		return "	get_{$RecordName}_record/1,\n	test_{$RecordName}_binary/1,\n";
	else
		return "	get_{$RecordName}_binary/1,\n	test_{$RecordName}_record/1,\n";	
}

function make($line)
{
	$pos_1 = strpos($line, ",");
	
	$RecordName = trim(substr($line, 8, $pos_1 - 8 ));
	
	$pos_2 = strpos($line, '{');
	$pos_3 = strrpos($line, '}');
	$tuple = trim(substr($line, $pos_2 + 1, $pos_3 - $pos_2 - 1));
	
	$arr = explode(',' , $tuple);
	for($i=0;$i<count($arr);$i++)
	{
		$tmp = trim($arr[$i]);
		$pp = strpos($tmp, '=');
		if ( $pp !== false )
			$arr[$i] = substr($tmp, 0, $pp);
		else
			$arr[$i] = $tmp;
	}
	
	//必须排好序，否则erlang的amf3模块解出来的顺序，是不匹配的。
	sort($arr);
	
	//echo $RecordName . ' ' . $tuple . "\r\n";
	
	if (substr($RecordName, -5) === '_recv')
	{	
		$module_and_method = substr($RecordName, 2, strlen($RecordName) - 2 - 5);
		$pos = strpos($module_and_method, '_');
		$module = substr($module_and_method, 0, $pos);
		$method = substr($module_and_method, $pos + 1);
		$result = "\n%% ==================== Module: $module  Method: $method	====================\n"
				. make_get_record($RecordName, $arr)
				. make_get_binary($RecordName, $arr, 'test_');
	}
	else
	{	
		$result = "\n" 
				. make_get_record_for_test($RecordName, $arr)
				. make_get_binary($RecordName, $arr);
	}
			
	return $result;
}


function make_get_record_for_test($RecordName, $arr)
{
	$pre = 'test_';
	$tuple = '';
	$atom = '';
	foreach($arr as $v)
	{
		if (empty($v))
			continue;
		if (!empty($tuple))
			$tuple .= ", \n		   ";
		if (!empty($atom))
			$atom  .= ",\n				";
			
		$tuple .= '{' . $v . ', ' . ucfirst($v) . '}';
		$atom  .= $v . ' = ' . ucfirst($v) ;
	}

	//可能 record没有定义内容的，则直接生成一个返回ok的函数就行了。
	if (empty($tuple))
		return $pre . "{$RecordName}_record(_BinaryData) -> ok. \n";	
	
	$result = $pre . "{$RecordName}_record(Amf3Obj) ->
	{obj, [$tuple] } = Amf3Obj,
	#{$RecordName}{
				$atom}.
";
	return $result;	
}

function make_get_record($RecordName, $arr, $pre = 'get_')
{
	$tuple = '';
	$atom = '';
	foreach($arr as $v)
	{
		if (empty($v))
			continue;
		if (!empty($tuple))
			$tuple .= ", \n		   ";
		if (!empty($atom))
			$atom  .= ",\n				";
			
		$tuple .= '{' . $v . ', ' . ucfirst($v) . '}';
		$atom  .= $v . ' = ' . ucfirst($v) ;
	}

	//可能 record没有定义内容的，则直接生成一个返回ok的函数就行了。
	if (empty($tuple))
		return $pre . "{$RecordName}_record(_BinaryData) -> ok. \n";	
	
	$result = $pre . "{$RecordName}_record(BinaryData) ->
	{ok, Amf3Obj, _} = amf3:decode(zlib:uncompress(BinaryData)),
	{obj, [$tuple] } = Amf3Obj,
	#{$RecordName}{
				$atom}.
";
	return $result;	
}

function make_get_binary($RecordName, $arr, $pre = 'get_')
{
	$tuple = '';
	foreach($arr as $v)
	{
		if (empty($v))
			continue;
		if (!empty($tuple))
			$tuple .= ",\n		";
			
		$tuple .= '{' . $v . ', RecordData#' . $RecordName . '.' . $v . '}';
	}

	//可能 record没有定义内容的，则直接生成一个返回ok的函数就行了。
	if (empty($tuple))
		return "\n{$pre}{$RecordName}_binary(_BinaryData) -> ok. \n";	
	
	$result = "
{$pre}{$RecordName}_binary(RecordData) ->
	Amf3Obj = {obj, [
		$tuple
		] },
	zlib:compress(amf3:encode(Amf3Obj)).
";
				
	
	return $result;
}


function make_header()
{
	return "%%%----------------------------------------------------------------------
%%% @copyright 2010 mgee (Ming Game Engine Erlang)
%%%
%%% @author odinxu
%%% @doc Generated by the rebuild_mgee_vo_erl.php  DO NOT EDIT!
%%% 	test_..... function use for stree test application,
%%%     get_...... function use for mgee application.
%%% @end
%%%----------------------------------------------------------------------

-module(mgee_vo).
	
-include(\"mgee_vo.hrl\").

%%-complie(export_all).	

";	
	
}


